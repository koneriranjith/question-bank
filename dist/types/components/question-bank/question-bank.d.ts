export declare class QuestionBank {
  private baseClassName;
  private blurUpdateAnswerType;
  client: string;
  apiBaseUrl: string;
  applicationId: string;
  carrierAuthorization: string;
  userId: string;
  formId: string;
  singleForm: boolean;
  isFormValidation: boolean;
  isErrorInRequiredMessage: string;
  questions: any[];
  error: string;
  isStepForm: Boolean;
  stepFormId: number;
  formData: any;
  formErrorMessage: any;
  isLoading: boolean;
  watchPropHandler(newValue: number, oldValue: number): void;
  setnLevelFormData(acc: any, val: any): any;
  setFormData(stepFormId: number, questions: any): void;
  componentDidLoad(): Promise<void>;
  componentWillLoad(): void;
  selectSection(id: any): void;
  selectStepForm(id: any, index: any): void;
  storeAnswerInQuestion(payload: any): Promise<any>;
  private timeoutId;
  debouncedMethod(payload: any): Promise<void>;
  setChildQuestionsData(childAnswerNew: any, addCheckList: any, removeCheckList: any, val: any, addList: any, removeList: any): any;
  getnLevelChildQuestions(val: any, addCheckList: any, removeCheckList: any, addList: any, removeList: any): any;
  getUpdatedChildQuestionData(addList: any, removeList: any): any;
  updateChildQuestions({ addList, removeList }: {
    addList: any;
    removeList: any;
  }): void;
  handleChange(detail: any, question: any): void;
  validateEmail(email: any): boolean;
  validatePhoneNumber(phoneNumber: any): boolean;
  renderField(question: any): any;
  formValidation(val: any): any;
  handleBlur(detail: any, question: any): void;
  isFormValid(): boolean;
  handleSubmit(isStepForm: any, index: any): void;
  handlePrevious(index: any): void;
  renderSubmitButton(index: any): any;
  private getSelectedQuestions;
  private renderChildQuestions;
  private renderQuestions;
  render(): any;
}
