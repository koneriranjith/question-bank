/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
export namespace Components {
    interface IlAddress {
        "apiBaseUrl": string;
        "carrierAuthorization": string;
        "debouncedMethod": (searchText: any) => Promise<void>;
        "error": string | undefined;
        "getOptions": (text: any) => Promise<any>;
        "label": string;
        "placeholder": object;
        "readOnly": boolean;
        "required": boolean;
        "tooltip": String;
        "value": any;
    }
    interface IlBeneficiary {
        "blurUpdateAnswerType": Array<string>;
        "customColumns": Array<object>;
        "error": string | undefined;
        "label": string;
        "maxLength": number;
        "minLength": number;
        "questionId": number;
        "required": boolean;
        "tooltip": String;
        "value": string;
    }
    interface IlCombobox {
        "error": string | undefined;
        "isDefault": Object;
        "label": string;
        "options": {
      label: string;
      value: string;
      id: string;
    }[];
        "placeholder": string;
        "readOnly": boolean;
        "required": Boolean;
        "tooltip": String;
        "value": string;
    }
    interface IlDatepicker {
        "dateFormat": String;
        "error": string | undefined;
        "label": string;
        "mask": any;
        "placeholder": string;
        "readOnly": boolean;
        "required": boolean;
        "tooltip": String;
        "value": string;
    }
    interface IlDropdown {
        "error": string | undefined;
        "isDefault": Object;
        "label": string;
        "options": InstanceType<typeof Option>[];
        "placeholder": string;
        "readOnly": boolean;
        "required": Boolean;
        "tooltip": String;
        "value": string;
    }
    interface IlFileLoader {
        "checkboxText": string;
        "error": string | undefined;
        "fileResponseList": any;
        "isShowCheckbox": Boolean;
        "label": string;
        "readOnly": boolean;
        "required": Boolean;
        "selectedValue": any;
        "tooltip": String;
    }
    interface IlInput {
        "error": string | undefined;
        "label": string;
        "mask": any;
        "placeholder": string;
        "questionType": String;
        "readOnly": boolean;
        "required": boolean;
        "tooltip": String;
        "type": string;
        "value": string;
    }
    interface IlMultiChoice {
        "error": string | undefined;
        "isDefault": Object;
        "label": string;
        "options": InstanceType<typeof Option>[];
        "readOnly": boolean;
        "required": Boolean;
        "selectedValue": any;
        "tooltip": String;
    }
    interface IlNotes {
        "checkboxText": string;
        "error": string | undefined;
        "isShowCheckbox": Boolean;
        "label": string;
        "notes": string;
        "readOnly": boolean;
        "required": Boolean;
        "selectedValue": any;
        "tooltip": String;
    }
    interface IlRadioButton {
        "error": string | undefined;
        "isDefault": Object;
        "label": string;
        "options": InstanceType<typeof Option>[];
        "readOnly": boolean;
        "required": Boolean;
        "selectedValue": any;
        "tooltip": String;
    }
    interface IlTextarea {
        "error": string | undefined;
        "label": string;
        "placeholder": string;
        "readOnly": boolean;
        "required": Boolean;
        "tooltip": String;
        "value": string;
    }
    interface IlTooltip {
        "tooltip": String;
    }
    interface MyMultiSelect {
        "error": string | undefined;
        "label": string;
        "options": InstanceType<typeof Option>[];
        "placeholder": string;
        "required": Boolean;
        "tooltip": String;
        "values": string[];
    }
    interface QuestionBank {
        "apiBaseUrl": string;
        "applicationId": string;
        "carrierAuthorization": string;
        "client": string;
        "debouncedMethod": (payload: any) => Promise<void>;
        "formId": string;
        "isFormValidation": boolean;
        "singleForm": boolean;
        "storeAnswerInQuestion": (payload: any) => Promise<any>;
        "userId": string;
    }
}
export interface IlAddressCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIlAddressElement;
}
export interface IlBeneficiaryCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIlBeneficiaryElement;
}
export interface IlComboboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIlComboboxElement;
}
export interface IlDatepickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIlDatepickerElement;
}
export interface IlDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIlDropdownElement;
}
export interface IlFileLoaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIlFileLoaderElement;
}
export interface IlInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIlInputElement;
}
export interface IlMultiChoiceCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIlMultiChoiceElement;
}
export interface IlNotesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIlNotesElement;
}
export interface IlRadioButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIlRadioButtonElement;
}
export interface IlTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIlTextareaElement;
}
export interface MyMultiSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyMultiSelectElement;
}
declare global {
    interface HTMLIlAddressElement extends Components.IlAddress, HTMLStencilElement {
    }
    var HTMLIlAddressElement: {
        prototype: HTMLIlAddressElement;
        new (): HTMLIlAddressElement;
    };
    interface HTMLIlBeneficiaryElement extends Components.IlBeneficiary, HTMLStencilElement {
    }
    var HTMLIlBeneficiaryElement: {
        prototype: HTMLIlBeneficiaryElement;
        new (): HTMLIlBeneficiaryElement;
    };
    interface HTMLIlComboboxElement extends Components.IlCombobox, HTMLStencilElement {
    }
    var HTMLIlComboboxElement: {
        prototype: HTMLIlComboboxElement;
        new (): HTMLIlComboboxElement;
    };
    interface HTMLIlDatepickerElement extends Components.IlDatepicker, HTMLStencilElement {
    }
    var HTMLIlDatepickerElement: {
        prototype: HTMLIlDatepickerElement;
        new (): HTMLIlDatepickerElement;
    };
    interface HTMLIlDropdownElement extends Components.IlDropdown, HTMLStencilElement {
    }
    var HTMLIlDropdownElement: {
        prototype: HTMLIlDropdownElement;
        new (): HTMLIlDropdownElement;
    };
    interface HTMLIlFileLoaderElement extends Components.IlFileLoader, HTMLStencilElement {
    }
    var HTMLIlFileLoaderElement: {
        prototype: HTMLIlFileLoaderElement;
        new (): HTMLIlFileLoaderElement;
    };
    interface HTMLIlInputElement extends Components.IlInput, HTMLStencilElement {
    }
    var HTMLIlInputElement: {
        prototype: HTMLIlInputElement;
        new (): HTMLIlInputElement;
    };
    interface HTMLIlMultiChoiceElement extends Components.IlMultiChoice, HTMLStencilElement {
    }
    var HTMLIlMultiChoiceElement: {
        prototype: HTMLIlMultiChoiceElement;
        new (): HTMLIlMultiChoiceElement;
    };
    interface HTMLIlNotesElement extends Components.IlNotes, HTMLStencilElement {
    }
    var HTMLIlNotesElement: {
        prototype: HTMLIlNotesElement;
        new (): HTMLIlNotesElement;
    };
    interface HTMLIlRadioButtonElement extends Components.IlRadioButton, HTMLStencilElement {
    }
    var HTMLIlRadioButtonElement: {
        prototype: HTMLIlRadioButtonElement;
        new (): HTMLIlRadioButtonElement;
    };
    interface HTMLIlTextareaElement extends Components.IlTextarea, HTMLStencilElement {
    }
    var HTMLIlTextareaElement: {
        prototype: HTMLIlTextareaElement;
        new (): HTMLIlTextareaElement;
    };
    interface HTMLIlTooltipElement extends Components.IlTooltip, HTMLStencilElement {
    }
    var HTMLIlTooltipElement: {
        prototype: HTMLIlTooltipElement;
        new (): HTMLIlTooltipElement;
    };
    interface HTMLMyMultiSelectElement extends Components.MyMultiSelect, HTMLStencilElement {
    }
    var HTMLMyMultiSelectElement: {
        prototype: HTMLMyMultiSelectElement;
        new (): HTMLMyMultiSelectElement;
    };
    interface HTMLQuestionBankElement extends Components.QuestionBank, HTMLStencilElement {
    }
    var HTMLQuestionBankElement: {
        prototype: HTMLQuestionBankElement;
        new (): HTMLQuestionBankElement;
    };
    interface HTMLElementTagNameMap {
        "il-address": HTMLIlAddressElement;
        "il-beneficiary": HTMLIlBeneficiaryElement;
        "il-combobox": HTMLIlComboboxElement;
        "il-datepicker": HTMLIlDatepickerElement;
        "il-dropdown": HTMLIlDropdownElement;
        "il-file-loader": HTMLIlFileLoaderElement;
        "il-input": HTMLIlInputElement;
        "il-multi-choice": HTMLIlMultiChoiceElement;
        "il-notes": HTMLIlNotesElement;
        "il-radio-button": HTMLIlRadioButtonElement;
        "il-textarea": HTMLIlTextareaElement;
        "il-tooltip": HTMLIlTooltipElement;
        "my-multi-select": HTMLMyMultiSelectElement;
        "question-bank": HTMLQuestionBankElement;
    }
}
declare namespace LocalJSX {
    interface IlAddress {
        "apiBaseUrl"?: string;
        "carrierAuthorization"?: string;
        "error"?: string | undefined;
        "label"?: string;
        "onValueBlur"?: (event: IlAddressCustomEvent<Object>) => void;
        "onValueChanged"?: (event: IlAddressCustomEvent<Object>) => void;
        "placeholder"?: object;
        "readOnly"?: boolean;
        "required"?: boolean;
        "tooltip"?: String;
        "value"?: any;
    }
    interface IlBeneficiary {
        "blurUpdateAnswerType"?: Array<string>;
        "customColumns"?: Array<object>;
        "error"?: string | undefined;
        "label"?: string;
        "maxLength"?: number;
        "minLength"?: number;
        "onBeneficiaryValueBlur"?: (event: IlBeneficiaryCustomEvent<object>) => void;
        "onBeneficiaryValueChanged"?: (event: IlBeneficiaryCustomEvent<object>) => void;
        "questionId"?: number;
        "required"?: boolean;
        "tooltip"?: String;
        "value"?: string;
    }
    interface IlCombobox {
        "error"?: string | undefined;
        "isDefault"?: Object;
        "label"?: string;
        "onValueChanged"?: (event: IlComboboxCustomEvent<string>) => void;
        "options"?: {
      label: string;
      value: string;
      id: string;
    }[];
        "placeholder"?: string;
        "readOnly"?: boolean;
        "required"?: Boolean;
        "tooltip"?: String;
        "value"?: string;
    }
    interface IlDatepicker {
        "dateFormat"?: String;
        "error"?: string | undefined;
        "label"?: string;
        "mask"?: any;
        "onValueChanged"?: (event: IlDatepickerCustomEvent<string>) => void;
        "placeholder"?: string;
        "readOnly"?: boolean;
        "required"?: boolean;
        "tooltip"?: String;
        "value"?: string;
    }
    interface IlDropdown {
        "error"?: string | undefined;
        "isDefault"?: Object;
        "label"?: string;
        "onValueChanged"?: (event: IlDropdownCustomEvent<string>) => void;
        "options"?: InstanceType<typeof Option>[];
        "placeholder"?: string;
        "readOnly"?: boolean;
        "required"?: Boolean;
        "tooltip"?: String;
        "value"?: string;
    }
    interface IlFileLoader {
        "checkboxText"?: string;
        "error"?: string | undefined;
        "fileResponseList"?: any;
        "isShowCheckbox"?: Boolean;
        "label"?: string;
        "onValueChanged"?: (event: IlFileLoaderCustomEvent<Boolean>) => void;
        "readOnly"?: boolean;
        "required"?: Boolean;
        "selectedValue"?: any;
        "tooltip"?: String;
    }
    interface IlInput {
        "error"?: string | undefined;
        "label"?: string;
        "mask"?: any;
        "onValueBlur"?: (event: IlInputCustomEvent<string>) => void;
        "onValueChanged"?: (event: IlInputCustomEvent<string>) => void;
        "placeholder"?: string;
        "questionType"?: String;
        "readOnly"?: boolean;
        "required"?: boolean;
        "tooltip"?: String;
        "type"?: string;
        "value"?: string;
    }
    interface IlMultiChoice {
        "error"?: string | undefined;
        "isDefault"?: Object;
        "label"?: string;
        "onValueChanged"?: (event: IlMultiChoiceCustomEvent<string[]>) => void;
        "options"?: InstanceType<typeof Option>[];
        "readOnly"?: boolean;
        "required"?: Boolean;
        "selectedValue"?: any;
        "tooltip"?: String;
    }
    interface IlNotes {
        "checkboxText"?: string;
        "error"?: string | undefined;
        "isShowCheckbox"?: Boolean;
        "label"?: string;
        "notes"?: string;
        "onValueChanged"?: (event: IlNotesCustomEvent<Boolean>) => void;
        "readOnly"?: boolean;
        "required"?: Boolean;
        "selectedValue"?: any;
        "tooltip"?: String;
    }
    interface IlRadioButton {
        "error"?: string | undefined;
        "isDefault"?: Object;
        "label"?: string;
        "onValueChanged"?: (event: IlRadioButtonCustomEvent<string>) => void;
        "options"?: InstanceType<typeof Option>[];
        "readOnly"?: boolean;
        "required"?: Boolean;
        "selectedValue"?: any;
        "tooltip"?: String;
    }
    interface IlTextarea {
        "error"?: string | undefined;
        "label"?: string;
        "onValueBlur"?: (event: IlTextareaCustomEvent<string>) => void;
        "onValueChanged"?: (event: IlTextareaCustomEvent<string>) => void;
        "placeholder"?: string;
        "readOnly"?: boolean;
        "required"?: Boolean;
        "tooltip"?: String;
        "value"?: string;
    }
    interface IlTooltip {
        "tooltip"?: String;
    }
    interface MyMultiSelect {
        "error"?: string | undefined;
        "label"?: string;
        "onValuesChanged"?: (event: MyMultiSelectCustomEvent<string[]>) => void;
        "options"?: InstanceType<typeof Option>[];
        "placeholder"?: string;
        "required"?: Boolean;
        "tooltip"?: String;
        "values"?: string[];
    }
    interface QuestionBank {
        "apiBaseUrl"?: string;
        "applicationId"?: string;
        "carrierAuthorization"?: string;
        "client"?: string;
        "formId"?: string;
        "isFormValidation"?: boolean;
        "singleForm"?: boolean;
        "userId"?: string;
    }
    interface IntrinsicElements {
        "il-address": IlAddress;
        "il-beneficiary": IlBeneficiary;
        "il-combobox": IlCombobox;
        "il-datepicker": IlDatepicker;
        "il-dropdown": IlDropdown;
        "il-file-loader": IlFileLoader;
        "il-input": IlInput;
        "il-multi-choice": IlMultiChoice;
        "il-notes": IlNotes;
        "il-radio-button": IlRadioButton;
        "il-textarea": IlTextarea;
        "il-tooltip": IlTooltip;
        "my-multi-select": MyMultiSelect;
        "question-bank": QuestionBank;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "il-address": LocalJSX.IlAddress & JSXBase.HTMLAttributes<HTMLIlAddressElement>;
            "il-beneficiary": LocalJSX.IlBeneficiary & JSXBase.HTMLAttributes<HTMLIlBeneficiaryElement>;
            "il-combobox": LocalJSX.IlCombobox & JSXBase.HTMLAttributes<HTMLIlComboboxElement>;
            "il-datepicker": LocalJSX.IlDatepicker & JSXBase.HTMLAttributes<HTMLIlDatepickerElement>;
            "il-dropdown": LocalJSX.IlDropdown & JSXBase.HTMLAttributes<HTMLIlDropdownElement>;
            "il-file-loader": LocalJSX.IlFileLoader & JSXBase.HTMLAttributes<HTMLIlFileLoaderElement>;
            "il-input": LocalJSX.IlInput & JSXBase.HTMLAttributes<HTMLIlInputElement>;
            "il-multi-choice": LocalJSX.IlMultiChoice & JSXBase.HTMLAttributes<HTMLIlMultiChoiceElement>;
            "il-notes": LocalJSX.IlNotes & JSXBase.HTMLAttributes<HTMLIlNotesElement>;
            "il-radio-button": LocalJSX.IlRadioButton & JSXBase.HTMLAttributes<HTMLIlRadioButtonElement>;
            "il-textarea": LocalJSX.IlTextarea & JSXBase.HTMLAttributes<HTMLIlTextareaElement>;
            "il-tooltip": LocalJSX.IlTooltip & JSXBase.HTMLAttributes<HTMLIlTooltipElement>;
            "my-multi-select": LocalJSX.MyMultiSelect & JSXBase.HTMLAttributes<HTMLMyMultiSelectElement>;
            "question-bank": LocalJSX.QuestionBank & JSXBase.HTMLAttributes<HTMLQuestionBankElement>;
        }
    }
}
