{"file":"il-notes.entry.esm.js","mappings":";;AAAA,MAAM,UAAU,GAAG,w+CAAw+C;;MCM9+C,OAAO;;;;;;;;;;;;;;EAYlB,iBAAiB;IACf,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;GAC7C;EACD,MAAM;IACJ,QACE,WAAK,KAAK,EAAC,UAAU,IACnB,aACE,YAAM,KAAK,EAAC,OAAO,IAChB,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,QAAQ,GAAG,YAAM,KAAK,EAAC,aAAa,QAAS,GAAG,IAAI,CACrD,EACN,IAAI,CAAC,OAAO,GAAG,kBAAY,OAAO,EAAE,IAAI,CAAC,OAAO,GAAe,GAAG,IAAI,CACrE,EACH,IAAI,CAAC,KAAK,GAAG,SAAG,KAAK,EAAC,OAAO,EAAC,SAAS,EAAE,IAAI,CAAC,KAAK,GAAM,GAAG,IAAI,EAChE,IAAI,CAAC,cAAc,IAClB,aAAO,KAAK,EAAE,eAAe,IAAI,CAAC,QAAQ,GAAG,UAAU,GAAG,EAAE,EAAE,IAC5D,aAAO,KAAK,EAAC,kBAAkB,EAAC,IAAI,EAAC,UAAU,EAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,IAAI,CAAC,aAAa,IAAI,KAAK,EAAE,QAAQ,EAAE,MAAM,IAAI,CAAC,iBAAiB,EAAE,GAAI,EAC1J,IAAI,CAAC,YAAY,EAClB,YAAM,KAAK,EAAC,WAAW,GAAQ,CACzB,IACN,IAAI,EAEP,IAAI,CAAC,KAAK,GAAG,SAAG,KAAK,EAAC,UAAU,IAAE,IAAI,CAAC,KAAK,CAAK,GAAG,IAAI,CACrD,EACN;GACH;;;;;;","names":[],"sources":["src/components/il-notes/il-notes.scss?tag=il-notes","src/components/il-notes/il-notes.tsx"],"sourcesContent":[".il-notes {\n  margin-bottom: 1rem;\n  position: relative;\n  .notes {\n    color: $appSecondaryColor;\n    /* border: 1px solid $ilInputBorderColor;\n    border-radius: 0.375rem;\n    padding: 0.775rem 0.75rem; */\n  }\n\n  .check-label {\n    margin-bottom: 10px;\n    font-size: $fontSize16;\n    font-weight: $fontWeight600;\n    text-transform: capitalize;\n  }\n  .multi-check {\n    display: inline-block;\n    position: relative;\n    padding-left: 35px;\n    margin-right: 22px;\n    margin-top: 10px;\n    cursor: pointer;\n    font-size: 18px;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    &.disabled {\n        opacity: 0.6;\n        cursor: not-allowed;\n        pointer-events: none;\n      }\n    .form-check-input {\n      position: absolute;\n      opacity: 0;\n      cursor: pointer;\n      height: 0;\n      width: 0;\n      &.disabled,\n      &:disabled {\n        opacity: 0.6;\n        cursor: not-allowed;\n        pointer-events: none;\n      }\n      &:checked {\n        ~ {\n          .checkmark {\n            background-color: $background-color_3;\n            &:after {\n              display: block;\n            }\n          }\n        }\n      }\n    }\n    .checkmark {\n      &:after {\n        left: 7px;\n        top: 3px;\n        width: 5px;\n        height: 10px;\n        border: solid $background-color_white;\n        border-width: 0 3px 3px 0;\n        -webkit-transform: rotate(45deg);\n        -ms-transform: rotate(45deg);\n        transform: rotate(45deg);\n      }\n    }\n  }\n  .checkmark {\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: 22px;\n    width: 22px;\n    border-radius: 4px;\n    background-color: $background-color_1;\n    &:after {\n      content: '';\n      position: absolute;\n      display: none;\n    }\n  }\n}\n","import { Component, h, Prop, Event, EventEmitter } from '@stencil/core';\n\n@Component({\n  tag: 'il-notes',\n  styleUrl: 'il-notes.scss',\n})\nexport class IlNotes {\n  @Prop() selectedValue: any;\n  @Prop() notes: string;\n  @Prop() isShowCheckbox: Boolean;\n  @Prop() checkboxText: string;\n  @Prop() readOnly: boolean;\n  @Prop() label: string;\n  @Prop() required: Boolean;\n  @Prop() error: string | undefined;\n  @Prop() tooltip: String;\n\n  @Event() valueChanged: EventEmitter<Boolean>; // Event emitted when selection changes\n  handleOptionClick() {\n    this.valueChanged.emit(!this.selectedValue);\n  }\n  render() {\n    return (\n      <div class=\"il-notes\">\n        <p>\n          <span class=\"label\">\n            {this.label}\n            {this.required ? <span class=\"il-required\">*</span> : null}\n          </span>\n          {this.tooltip ? <il-tooltip tooltip={this.tooltip}></il-tooltip> : null}\n        </p>\n        {this.notes ? <p class=\"notes\" innerHTML={this.notes}></p> : null}\n        {this.isShowCheckbox ? (\n          <label class={`multi-check ${this.readOnly ? \"disabled\" : \"\"}`}>\n            <input class=\"form-check-input\" type=\"checkbox\" disabled={this.readOnly} checked={this.selectedValue || false} onChange={() => this.handleOptionClick()} />\n            {this.checkboxText}\n            <span class=\"checkmark\"></span>\n          </label>\n        ) : null}\n\n        {this.error ? <p class=\"il-error\">{this.error}</p> : null}\n      </div>\n    );\n  }\n}\n"],"version":3}